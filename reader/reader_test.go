package reader_test

import (
	"bufio"
	"os"

	store "github.com/Contra-Culture/gp/store"

	. "github.com/Contra-Culture/gp/reader"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("reader", func() {
	var (
		file         *os.File
		err          error
		content      *bufio.Reader
		symbolsStore *store.SymbolsStore
		reader       *Reader
	)
	BeforeEach(func() {
		file, err = os.Open("../test/test")
		if err != nil {
			panic(err)
		}
		content = bufio.NewReader(file)
		symbolsStore, err = store.New(content)
		Expect(err).NotTo(HaveOccurred())
		reader = New(symbolsStore, 0)
		Expect(reader).NotTo(BeNil())
	})
	AfterEach(func() {
		err = file.Close()
		if err != nil {
			panic(err)
		}
	})
	Describe(".ReadSymbol()", func() {
		It("iterates over runes", func() {
			s, err := reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('s'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(1))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('o'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(2))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('m'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(3))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('e'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(4))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal(' '))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(5))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('c'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(6))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('o'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(7))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('n'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(8))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('t'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(9))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('e'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(10))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('n'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(11))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('t'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(12))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('\n'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(13))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('h'))
			Expect(s.Line).To(Equal(2))
			Expect(s.Position).To(Equal(1))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('e'))
			Expect(s.Line).To(Equal(2))
			Expect(s.Position).To(Equal(2))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('r'))
			Expect(s.Line).To(Equal(2))
			Expect(s.Position).To(Equal(3))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('e'))
			Expect(s.Line).To(Equal(2))
			Expect(s.Position).To(Equal(4))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('\n'))
			Expect(s.Line).To(Equal(2))
			Expect(s.Position).To(Equal(5))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('f'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(1))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('o'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(2))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('r'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(3))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal(' '))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(4))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('t'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(5))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('e'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(6))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('s'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(7))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('t'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(8))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('\n'))
			Expect(s.Line).To(Equal(3))
			Expect(s.Position).To(Equal(9))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('p'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(1))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('u'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(2))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('r'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(3))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('p'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(4))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('o'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(5))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('s'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(6))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('e'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(7))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('s'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(8))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('\n'))
			Expect(s.Line).To(Equal(4))
			Expect(s.Position).To(Equal(9))
			s, err = reader.ReadSymbol()
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(Equal("36 index is out of symbols range (lenght: 36)"))
			Expect(s.Rune).To(Equal(rune(0)))
			Expect(s.Line).To(Equal(0))
			Expect(s.Position).To(Equal(0))
		})
	})
	Describe(".Continuation()", func() {
		It("returns fork", func() {
			continuation := reader.Continuation()
			s, err := reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(s.Rune).To(Equal('s'))
			Expect(s.Line).To(Equal(1))
			Expect(s.Position).To(Equal(1))
			sf, err := continuation.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(sf).To(Equal(s))
			sf, err = continuation.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(sf).To(Equal(store.Symbol{
				Rune:     'o',
				Size:     1,
				Line:     1,
				Position: 2,
			}))
			continuation2 := continuation.Continuation()
			sff, err := continuation2.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			Expect(sff).To(Equal(store.Symbol{
				Rune:     'm',
				Size:     1,
				Line:     1,
				Position: 3,
			}))
		})
	})
	Describe(".Frame()", func() {
		It("returns reed symbols", func() {
			frame := reader.Frame()
			Expect(frame).To(HaveLen(0))
			s, err := reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			expected1 := store.Symbol{
				Rune:     's',
				Size:     1,
				Line:     1,
				Position: 1,
			}
			Expect(s).To(Equal(expected1))
			frame = reader.Frame()
			Expect(frame).To(HaveLen(1))
			Expect(frame[0]).To(Equal(expected1))
			s, err = reader.ReadSymbol()
			Expect(err).NotTo(HaveOccurred())
			expected2 := store.Symbol{
				Rune:     'o',
				Size:     1,
				Line:     1,
				Position: 2,
			}
			Expect(s).To(Equal(expected2))
			frame = reader.Frame()
			Expect(frame).To(HaveLen(2))
			Expect(frame[0]).To(Equal(expected1))
			Expect(frame[1]).To(Equal(expected2))
			r, size, err := reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('m'))
			frame = reader.Frame()
			Expect(frame).To(HaveLen(3))
			Expect(frame[0]).To(Equal(expected1))
			Expect(frame[1]).To(Equal(expected2))
			expected3 := store.Symbol{
				Rune:     'm',
				Size:     1,
				Line:     1,
				Position: 3,
			}
			Expect(frame[2]).To(Equal(expected3))
		})
	})
	Describe(".ReadRune()", func() {
		It("returns rune", func() {
			r, size, err := reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('s'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('o'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('m'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('e'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal(' '))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('c'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('o'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('n'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('t'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('e'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('n'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('t'))
			r, size, err = reader.ReadRune()
			Expect(err).NotTo(HaveOccurred())
			Expect(size).To(Equal(1))
			Expect(r).To(Equal('\n'))
			frame := reader.Frame()
			Expect(frame).To(HaveLen(13))
		})
	})
})
